<?php
/**
 * Plugin Name: WP Modern Password Hashing
 * Version:     1.0.1
 * Description: Forces user password hashes as generated by WordPress to be more modern/secure, Inspired by 'Password bcrypt' by Roots.
 * Licence:     GPLv2 or later
 * Author:      Handmade Web & Design
 * Author URI:  https://handmadeweb.com.au/
 */

if(!function_exists('add_filter')){
    header('Status: 403 Forbidden');
    header('HTTP/1.1 403 Forbidden');
    exit();
}

$wpmph_password_hash_options = array(
    'algorithm' => PASSWORD_BCRYPT,
    'options' => array(
        'cost' => 10,
    ),
);

$wpmph_phpass_options = array(
    'rounds' => 16,
    'use_md5' => false,
);

/**
 * Checks to see if $wp_hasher has been loaded previously
 * If it has not we will load it.
 *
 * Then
 *
 * Checks to see if $wp_hasher has been loaded
 * Sets the iteration count (rounds) to '16'
 * Sets the portable hashes (use md5) to 'false'
 *
 * @since 1.0.0
 *
 * @global $wpmph_options
 * @global $wpmph_phpass_options
 * @global PasswordHash $wp_hasher PHPass object
 */
function wpmph_init_wp_hasher(){
    global $wpmph_options;
    global $wpmph_phpass_options;
    global $wp_hasher;

    if(empty($wp_hasher)){
        require_once(ABSPATH . WPINC . '/class-phpass.php');
        // By default, use the portable hash from phpass
        $wp_hasher = new PasswordHash(8, true); // Wordpress Default
    }

    if(!empty($wp_hasher)){
        $wp_hasher->iteration_count_log2 = $wpmph_phpass_options['rounds']; // 16
	    $wp_hasher->portable_hashes = $wpmph_phpass_options['use_md5']; // false
    }
}

if(!function_exists('wp_hash_password')){
    /**
     * As per WordPress's pluggable.php comments.
     *
     * Create a hash (encrypt) of a plain text password.
     *
     * For integration with other applications, this function can be overwritten to
     * instead use the other package password checking algorithm.
     *
     * @since WordPress 2.5.0
     *
     * @global PasswordHash $wp_hasher PHPass object
     *
     * @param string $password Plain text user password to hash
     * @return string The hash string of the password
     *
     * Changes in WP Modern Password Hashing:
     * @global $wpmph_options
     * @global $wpmph_password_hash_options
     * @global $wpmph_phpass_options
     */
    function wp_hash_password($password){
        global $wpmph_options;
        global $wpmph_password_hash_options;
        global $wpmph_phpass_options;
        global $wp_hasher;

        if(function_exists('password_hash')){
            return password_hash(trim($password), $wpmph_password_hash_options['algorithm'], $wpmph_password_hash_options['options']);
        }

        wpmph_init_wp_hasher(); // $wp_hasher = new PasswordHash($wpmph_phpass_options['rounds'], $wpmph_phpass_options['use_md5']);

        return $wp_hasher->HashPassword(trim($password));
    }
}

if(!function_exists('wp_check_password')){
    /**
     * As per WordPress's pluggable.php comments.
     *
     * Checks the plaintext password against the encrypted Password.
     *
     * Maintains compatibility between old version and the new cookie authentication
     * protocol using PHPass library. The $hash parameter is the encrypted password
     * and the function compares the plain text password when encrypted similarly
     * against the already encrypted password to see if they match.
     *
     * For integration with other applications, this function can be overwritten to
     * instead use the other package password checking algorithm.
     *
     * @since WordPress 2.5.0
     *
     * @global PasswordHash $wp_hasher PHPass object used for checking the password
     *	against the $hash + $password
     * @uses PasswordHash::CheckPassword
     *
     * @param string     $password Plaintext user's password
     * @param string     $hash     Hash of the user's password to check against.
     * @param string|int $user_id  Optional. User ID.
     * @return bool False, if the $password does not match the hashed password
     *
     * Changes in WP Modern Password Hashing:
     * @global $wpmph_options
     * @global $wpmph_password_hash_options
     * @global $wpmph_phpass_options
     */
    function wp_check_password($password, $hash, $user_id = ''){
        global $wpmph_options;
        global $wpmph_password_hash_options;
        global $wpmph_phpass_options;
        global $wp_hasher;

        if(function_exists('password_verify') && password_verify($password, $hash)){
            if(password_needs_rehash($hash, $wpmph_password_hash_options['algorithm'], $wpmph_password_hash_options['options'])){
                $hash = wp_set_password($password, $user_id);
            }
            $check = password_verify($password, $hash);
            return apply_filters('check_password', $check, $password, $hash, $user_id);
        }

        /*  Hash Prefixes:
            $P$ = PHPASS/MD5,
            $2a$ = PHPASS/BCRYPT,
            $2y$ = BCRYPT,
            $argon2i$ = ARGON2I
        */
        if(strpos($hash, '$P$') === 0 || strpos($hash, '$2a$') === 0 || strpos($hash, '$2y$') === 0){

            wpmph_init_wp_hasher(); // $wp_hasher = new PasswordHash($wpmph_phpass_options['rounds'], $wpmph_phpass_options['use_md5']);

            $check = $wp_hasher->CheckPassword($password, $hash);

            if($check && $user_id){
                if(function_exists('password_hash') || strpos($hash, '$2y$') === 0){
                    $hash = wp_set_password($password, $user_id);
                }
                return apply_filters('check_password', $check, $password, $hash, $user_id);
            }
        }

        if(strlen($hash) <= 32){
            $check = hash_equals($hash, md5($password));
            if($check && $user_id){
                // Rehash using new hash.
                $hash = wp_set_password($password, $user_id);
                return apply_filters('check_password', $check, $password, $hash, $user_id);
            }
        }

        /** This filter is documented in wp-includes/pluggable.php */
        return apply_filters('check_password', $check, $password, $hash, $user_id);
    }
}

if(!function_exists('wp_set_password')){
    /**
     * As per WordPress's pluggable.php comments.
     *
     * Updates the user's password with a new encrypted one.
     *
     * For integration with other applications, this function can be overwritten to
     * instead use the other package password checking algorithm.
     *
     * Please note: This function should be used sparingly and is really only meant for single-time
     * application. Leveraging this improperly in a plugin or theme could result in an endless loop
     * of password resets if precautions are not taken to ensure it does not execute on every page load.
     *
     * @since WordPress 2.5.0
     *
     * @global wpdb $wpdb WordPress database abstraction object.
     *
     * @param string $password The plaintext new user password
     * @param int    $user_id  User ID
     *
     * Changes in WP Modern Password Hashing:
     * @return string The hash string of the password
     */
    function wp_set_password($password, $user_id){
    	global $wpdb;

    	$hash = wp_hash_password($password);
    	$wpdb->update($wpdb->users, array('user_pass' => $hash, 'user_activation_key' => ''), array('ID' => $user_id));

    	wp_cache_delete($user_id, 'users');
        return $hash;
    }
}

/**
 * Register additional columns to the Users page.
 *
 * @param (array) $columns An array of column name => label. The name is passed to functions to identify the column.
 * The label is shown as the column header.
 *
 */
function wpmph_manage_users_columns($columns){
    return array_merge($columns, array('password_algorithm' => 'Password Algorithm'));
}
add_filter('manage_users_columns', 'wpmph_manage_users_columns');

/**
 * Add data to the additional columns added to the Users page.
 *
 * @param (string) $output Custom column output. Default empty.
 * @param (String) $column_name Column name.
 * @param (integer) $user_id ID of the currently-listed user.
 *
 * @return (string)
 */
function wpmph_users_custom_column($output, $column_name, $user_id){
    if($column_name === 'password_algorithm'){
        $user = get_userdata($user_id);

        /*  Hash Prefixes:
            $P$ = PHPASS/MD5,
            $2a$ = PHPASS/BCRYPT,
            $2y$ = BCRYPT,
            $argon2i$ = ARGON2I
        */
        if(strpos($user->user_pass, '$argon2i$') === 0){
            return '<span style="color: blue;">ARGON2I</span>';
        }elseif(strpos($user->user_pass, '$2y$') === 0){
            return '<span style="color: blue;">BCRYPT</span>';
        }elseif(strpos($user->user_pass, '$2a$') === 0){
            return '<span style="color: blue;">PHPASS/BCRYPT</span>';
        }elseif(strpos($user->user_pass, '$P$') === 0){
            return '<span style="color: orange;">PHPASS/MD5</span>';
        }elseif(strlen($user->user_pass) <= 32){
            return '<span style="color: red;">MD5</span>';
        }
    }
}
add_filter('manage_users_custom_column', 'wpmph_users_custom_column', 10, 3);